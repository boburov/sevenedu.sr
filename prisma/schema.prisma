generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  CREATOR
}

model User {
  id                   String                  @id @default(uuid())
  name                 String?
  surname              String?
  phonenumber          String?
  role                 UserRole                @default(USER)
  password             String
  email                String                  @unique
  profilePic           String                  @default("")
  coins                Int                     @default(0)
  isVerified           Boolean                 @default(false)
  code                 String
  codeExpiresAt        DateTime?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  lastLoginAt          DateTime?
  courses              UserCourse[]
  showedLesson         LessonActivity[]
  notifications        NotificationRecipient[]
  notificationsRead    NotificationRead[]
  lessonAIUsage        LessonAIUsage[]
  VocabularyTestResult VocabularyTestResult[]
  certificate          Certificate[]
}

model VocabularyTestResult {
  id      String   @id @default(uuid())
  userId  String
  date    DateTime @default(now())
  correct Int
  total   Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model CoursesCategory {
  id             String           @id @default(uuid())
  title          String
  shortName      String
  thumbnail      String
  goal           String
  lessons        Lessons[]        @relation("CategoryLessons")
  users          UserCourse[]
  notifications  Notification[]
  LessonActivity LessonActivity[]
  certificate    Certificate[]
}

model UserCourse {
  id         String   @id @default(uuid())
  userId     String
  courseId   String
  isFinished Boolean  @default(false)
  joinedAt   DateTime @default(now())

  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course CoursesCategory @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Lessons {
  id                String           @id @default(uuid())
  title             String
  isDemo            Boolean          @default(false)
  videoUrl          String
  coursesCategoryId String
  coursesCategory   CoursesCategory  @relation("CategoryLessons", fields: [coursesCategoryId], references: [id], onDelete: Cascade)
  order             Int              @default(0)
  dictonary         Dictonary[]      @relation("Dictonary")
  isVisible         Boolean          @default(true)
  quizs             Quizs[]          @relation("Quizs")
  questions         Quessions[]      @relation("Quessions")
  lessonActivity    LessonActivity[]
  sentencePuzzles   SentencePuzzle[]   @relation("LessonSentencePuzzle") // <<< SHU YERDA

  @@unique([coursesCategoryId, order])
}

model SentencePuzzle {
  id       String   @id @default(uuid())
  sentence String
  answer   String
  lessonId String
  lesson   Lessons  @relation("LessonSentencePuzzle", fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}


model LessonActivity {
  id        String   @id @default(uuid())
  userId    String
  lessonsId String
  courseId  String?
  watchedAt DateTime @default(now())

  vocabularyCorrect Int @default(0)
  vocabularyWrong   Int @default(0)

  score       Int @default(0)
  quizCorrect Int @default(0)
  quizWrong   Int @default(0)

  user   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lessons          @relation(fields: [lessonsId], references: [id], onDelete: Cascade)
  course CoursesCategory? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonsId])
}

model Quizs {
  id            String @id @default(uuid())
  quiz          String
  lessonsId     String
  option1       String
  option2       String
  option3       String
  currentOption String

  Lessons Lessons @relation("Quizs", fields: [lessonsId], references: [id], onDelete: Cascade)
}

model Dictonary {
  id         String @id @default(uuid())
  word       String
  translated String
  lessonsId  String

  Lessons Lessons @relation("Dictonary", fields: [lessonsId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  createdAt DateTime @default(now())
  isGlobal  Boolean  @default(false)
  sentAt    DateTime @default(now())

  courseId String?
  course   CoursesCategory? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  recipients NotificationRecipient[]
  readBy     NotificationRead[]
}

model NotificationRecipient {
  id             String  @id @default(uuid())
  userId         String
  notificationId String
  isRead         Boolean @default(false)

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
}

model NotificationRead {
  id             String   @id @default(uuid())
  userId         String
  notificationId String
  readAt         DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
}

model Quessions {
  id        String @id @default(uuid())
  quession  String
  lessonsId String

  Lessons Lessons @relation("Quessions", fields: [lessonsId], references: [id], onDelete: Cascade)
}

model LessonAIUsage {
  id       String   @id @default(uuid())
  userId   String
  lessonId String
  date     DateTime
  count    Int      @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId, date])
}

model Certificate {
  id       String   @id @default(uuid())
  userId   String
  courseId String
  score    Int
  issuedAt DateTime @default(now())

  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  course CoursesCategory @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}